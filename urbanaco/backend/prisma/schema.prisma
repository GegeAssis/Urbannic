generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql" url = env("DATABASE_URL") }

enum TenantType { SHOP RESTAURANT }
enum PackageStatus { PREPARING AWAITING_COURIER PICKED_UP EN_ROUTE DELIVERED FAILED }
enum ShiftStatus { PLANNED IN_PROGRESS PAUSED DONE CANCELLED }
enum ContractMode { RENTAL PURCHASE }
enum ContractType { BIKE FLEET }
enum CourseType { FREE PAID }

model Tenant {
  id        String   @id @default(cuid())
  type      TenantType
  name      String
  city      String
  users     User[]
  bikes     Bike[]
  jobs      RestaurantJob[]
  fleets    Fleet[]
  createdAt DateTime @default(now())

  shopContracts       RentalContract[] @relation("ShopContracts")
  restaurantContracts RentalContract[] @relation("RestaurantContracts")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String?
  name      String
  role      String
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  courier   Courier?
  createdAt DateTime @default(now())
}

model Courier {
  id              String  @id
  meiCnpj         String?
  city            String
  level           Int      @default(1)
  xp              Int      @default(0)
  hasActiveRental Boolean  @default(false)
  user            User     @relation(fields: [id], references: [id])
  shifts          Shift[]
}

model Bike {
  id        String  @id @default(cuid())
  tenantId  String
  tenant    Tenant  @relation(fields: [tenantId], references: [id])
  model     String
  status    String
  telemetry TelemetryDevice?
  lines     RentalLine[]
}

model Fleet {
  id           String  @id @default(cuid())
  shopTenantId String
  tenant       Tenant  @relation(fields: [shopTenantId], references: [id])
  name         String
  status       String   @default("ACTIVE")
  bikes        FleetBike[]
}

model FleetBike {
  fleetId String
  bikeId  String
  fleet   Fleet  @relation(fields: [fleetId], references: [id])
  bike    Bike   @relation(fields: [bikeId], references: [id])
  @@id([fleetId, bikeId])
}

model RentalContract {
  id                  String   @id @default(cuid())
  shopTenantId        String
  shop                Tenant   @relation("ShopContracts", fields: [shopTenantId], references: [id])
  restaurantTenantId  String?
  restaurant          Tenant?  @relation("RestaurantContracts", fields: [restaurantTenantId], references: [id])
  courierId           String?
  courier             User?    @relation(fields: [courierId], references: [id])
  mode                ContractMode
  type                ContractType
  status              String   @default("PENDING")
  startAt             DateTime?
  endAt               DateTime?
  lines               RentalLine[]
  createdAt           DateTime @default(now())
}

model RentalLine {
  id         String   @id @default(cuid())
  contractId String
  contract   RentalContract @relation(fields: [contractId], references: [id])
  bikeId     String?
  bike       Bike?    @relation(fields: [bikeId], references: [id])
  fleetId    String?
  fleet      Fleet?   @relation(fields: [fleetId], references: [id])
  isActive   Boolean  @default(false)

  @@index([bikeId], map: "idx_rental_line_bike")
}

model RestaurantJob {
  id           String  @id @default(cuid())
  tenantId     String
  tenant       Tenant  @relation(fields: [tenantId], references: [id])
  title        String
  shiftType    String
  slots        Int
  startDate    DateTime
  endDate      DateTime
  remuneration Int
  shifts       Shift[]
  createdAt    DateTime @default(now())
}

model Shift {
  id         String  @id @default(cuid())
  tenantId   String
  tenant     Tenant  @relation(fields: [tenantId], references: [id])
  courierId  String
  courier    Courier @relation(fields: [courierId], references: [id])
  jobId      String
  job        RestaurantJob @relation(fields: [jobId], references: [id])
  status     ShiftStatus
  startedAt  DateTime?
  endedAt    DateTime?
  packages   DeliveryPackage[]
  createdAt  DateTime @default(now())

  @@index([courierId, status])
}

model DeliveryPackage {
  id             String        @id @default(cuid())
  shiftId        String
  shift          Shift         @relation(fields: [shiftId], references: [id])
  status         PackageStatus @default(PREPARING)
  customerName   String
  customerPhone  String
  pickupAddress  String
  dropoffAddress String
  createdAt      DateTime @default(now())
}

model TelemetryDevice {
  id              String @id @default(cuid())
  bikeId          String @unique
  bike            Bike   @relation(fields: [bikeId], references: [id])
  imei            String
  lastHeartbeatAt DateTime?
}

model Badge {
  code         String @id
  name         String
  minXp        Int
  discountRate Float
  colorHex     String
  iconUrl      String?
}

model Transaction {
  id               String @id @default(cuid())
  type             String
  amount           Int
  tenantId         String?
  courierId        String?
  badgeCode        String?
  baseFeeRate      Float
  effectiveFeeRate Float
  appFeeAmount     Int
  createdAt        DateTime @default(now())
}

model Course {
  id         String @id @default(cuid())
  title      String
  type       CourseType
  hours      Int
  priceCents Int?
  createdAt  DateTime @default(now())
}
